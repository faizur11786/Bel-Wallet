import { Inter } from "@next/font/google";
import Head from "next/head";
import React, { useEffect, useState } from "react";
import styles from "../styles/Home.module.css";
import { Client } from "../../belshare-blockchainv1.0/ts-client";
import { DirectSecp256k1HdWallet } from "@cosmjs/proto-signing";
import Form from "../components/Form";
import Profile from "../components/Profile/Profile";
const inter = Inter({ subsets: ["latin"] });

const Wallet = (props) => {
    const [client, setClient] = useState(null);
    const [wallet, setWallet] = useState(null);
    const [isExist, setIsExist] = useState(true);
    const [entitys, setEntitys] = useState(null);

    useEffect(() => {
        (async () => {
            const mnemonic =
                "hazard tomato paper crime process moment soup market aware hole jeans engage display avoid shock keen tank shove betray occur spike type across pioneer";

            const wallet = await DirectSecp256k1HdWallet.fromMnemonic(
                mnemonic,
                { prefix: "be" }
            );

            const chain = new Client({
                apiURL: "http://localhost:1317",
                rpcURL: "http://localhost:26657",
                prefix: "be",
            });
            console.log("chain", chain.useKeplr());
            setClient(chain);
            const accounts = await wallet.getAccounts();
            setWallet(accounts[0]);
        })();
    }, []);

    useEffect(() => {
        (async () => await loadEntity())();
    }, [client]);

    const loadEntity = async () => {
        try {
            if (!client) return;
            const res = await client.BeltestEav.query.queryEntityTypesAll();

            console.log("Entity Types", res.data);
            setEntitys(res.data.entityTypes);
        } catch (error) {
            console.log(error);
        }
    };

    const updateEntityType = async () => {
        const {
            [0]: { address },
        } = await client.signer.getAccounts();
        const payload = {
            creator: address,
            guid: "65252c69-2007-42df-8dfa-9f04c0b59237",
            newName: "Hello",
        };

        console.log("payload", payload);
        const data = await client.BeltestEav.tx.sendMsgUpdateEntityType({
            value: payload,
        });
        console.log("data", data);
    };

    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <meta
                    name="viewport"
                    content="width=device-width, initial-scale=1"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            {/* <button onClick={updateEntityType}>Change Entity type name</button> */}
            <main className={styles.main}>
                <h3 className={inter.className}>Admin's perspective</h3>
                <br />
                {wallet && (
                    <Profile
                        client={client}
                        setIsExist={setIsExist}
                        wallet={wallet}
                    />
                )}
                <div className={styles.formGroup}>
                    <Form.Entity
                        client={client}
                        wallet={wallet}
                        loadEntity={loadEntity}
                    />
                    <Form.Attribute
                        client={client}
                        wallet={wallet}
                        entitys={entitys}
                    />
                </div>
            </main>
        </>
    );
};

export default Wallet;
