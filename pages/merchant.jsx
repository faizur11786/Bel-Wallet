import { Inter } from "@next/font/google";
import Head from "next/head";
import React, { useEffect, useState } from "react";
import styles from "../styles/Home.module.css";
import { Client } from "../../belshare-blockchainv1.0/ts-client";
import { DirectSecp256k1HdWallet } from "@cosmjs/proto-signing";
import Form from "../components/Form";
import Profile from "../components/Profile/Profile";
const inter = Inter({ subsets: ["latin"] });

const Wallet = (props) => {
    const [client, setClient] = useState(null);
    const [wallet, setWallet] = useState(null);
    const [info, setInfo] = useState(null);
    const [isExist, setIsExist] = useState(true);
    const [tableData, setTableData] = useState(null);

    const [attributes, setattributes] = useState(null);
    useEffect(() => {
        (async () => {
            if (!client) return;
            try {
                const {
                    data: { entityTypes },
                } = await client.BeltestEav.query.queryEntityTypesAll();
                const guid =
                    entityTypes[0].name.toLowerCase() === "user"
                        ? entityTypes[0].guid
                        : entityTypes[1].guid;

                const {
                    data: { attributes: userAtt },
                } = await client.BeltestEav.query.queryAttributes(guid);
                setattributes(userAtt);
            } catch (error) {
                console.log(error);
            }
        })();
    }, [client]);

    useEffect(() => {
        (async () => {
            const mnemonic =
                "lamp weird level casino bulb jelly slow kit lunch kiss cake print inhale bomb apart cupboard scan behind stock village desk appear turtle wheel";

            const wallet = await DirectSecp256k1HdWallet.fromMnemonic(
                mnemonic,
                { prefix: "be" }
            );

            const chain = new Client(
                {
                    apiURL: "http://localhost:1317",
                    rpcURL: "http://localhost:26657",
                    prefix: "be",
                },
                wallet
            );
            setClient(chain);
            const accounts = await wallet.getAccounts();
            setWallet(accounts[0]);
            await loadInfo(chain, accounts[0].address);
        })();
    }, []);

    const loadInfo = async (client, address) => {
        try {
            const {
                data: { entityTypes },
            } = await client.BeltestEav.query.queryEntityTypesAll();
            const guid =
                entityTypes[0].name.toLowerCase() === "merchant"
                    ? entityTypes[0].guid
                    : entityTypes[1].guid;
            const { data } = await client.BeltestEav.query.queryMerchants(
                address,
                guid
            );
            setInfo(data);

            const {
                [0]: { address: address1 },
            } = await client.signer.getAccounts();
            const { data: sharedData } =
                await client.BeltestEav.query.querySharedWith(
                    entityTypes[0].name.toLowerCase() === "user"
                        ? entityTypes[0].guid
                        : entityTypes[1].guid,
                    address1,
                    "be1kk5pp3rmypd3tu9vrt7rlgw9wtvlzds098ky56"
                );
            console.log("sharedData", sharedData);
            setTableData(sharedData);
        } catch (error) {
            console.log(error);
            setIsExist(false);
        }
    };
    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <meta
                    name="viewport"
                    content="width=device-width, initial-scale=1"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className={styles.main}>
                <h3 className={inter.className}>Merchant's perspective</h3>
                <br />
                {wallet && (
                    <Profile
                        info={info}
                        client={client}
                        setIsExist={setIsExist}
                        wallet={wallet}
                    />
                )}
                <div className={styles.formGroup}>
                    {/* <Form.Entity client={client} wallet={wallet} /> */}
                    {/* <Form.Attribute client={client} wallet={wallet} /> */}
                    {!isExist && (
                        <Form.Merchant
                            client={client}
                            setIsExist={setIsExist}
                            wallet={wallet}
                            loadInfo={loadInfo}
                        />
                    )}
                </div>

                <div className={`${inter.className} ${styles.table}`}>
                    {attributes && (
                        <table className={styles.table}>
                            <thead>
                                <tr>
                                    <th>Creator/User</th>
                                    {attributes.map((attribute, index) => (
                                        <th key={attribute.guid}>
                                            {attribute.name}
                                        </th>
                                    ))}
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>{tableData?.entity}</td>
                                    {tableData &&
                                        tableData.attributes.map(
                                            (attribute, index) => {
                                                return (
                                                    <td>{attribute.value}</td>
                                                );
                                            }
                                        )}
                                </tr>
                            </tbody>
                        </table>
                    )}
                </div>
            </main>
        </>
    );
};

export default Wallet;
