import { Inter } from '@next/font/google';
import Head from 'next/head';
import React, { useEffect, useState } from 'react';
import styles from '../styles/Home.module.css';
import { Client } from '../../belShare/ts-client';
import { DirectSecp256k1HdWallet } from '@cosmjs/proto-signing';
import Form from '../components/Form';
import Profile from '../components/Profile/Profile';
const inter = Inter({ subsets: ['latin'] });

const Wallet = (props) => {
	const [client, setClient] = useState(null);
	const [wallet, setWallet] = useState(null);
	const [info, setInfo] = useState(null);
	const [isExist, setIsExist] = useState(true);

	useEffect(() => {
		(async () => {
			const mnemonic =
				'lamp weird level casino bulb jelly slow kit lunch kiss cake print inhale bomb apart cupboard scan behind stock village desk appear turtle wheel';

			const wallet = await DirectSecp256k1HdWallet.fromMnemonic(mnemonic, { prefix: 'share' });

			const chain = new Client(
				{
					apiURL: 'http://localhost:1317',
					rpcURL: 'http://localhost:26657',
					prefix: 'share',
				},
				wallet
			);
			setClient(chain);
			const accounts = await wallet.getAccounts();
			setWallet(accounts[0]);
			await loadInfo(chain, accounts[0].address);
		})();
	}, []);

	const loadInfo = async (client, address) => {
		try {
			const entitytyperes = await client.BelshareEav.query.queryEntityTypeAll();
			const res = await client.BelshareEav.query.queryMerchantNew(address, entitytyperes.data.entityType[0].guid);
			setInfo(res.data);
		} catch (error) {
			console.log(error);
		}
	};

	return (
		<>
			<Head>
				<title>Create Next App</title>
				<meta name='description' content='Generated by create next app' />
				<meta name='viewport' content='width=device-width, initial-scale=1' />
				<link rel='icon' href='/favicon.ico' />
			</Head>
			<main className={styles.main}>
				<h3 className={inter.className}>Merchant's perspective</h3>
				<br />
				{wallet && <Profile info={info} client={client} setIsExist={setIsExist} wallet={wallet} />}
				<div className={styles.formGroup}>
					{/* <Form.Entity client={client} wallet={wallet} /> */}
					{/* <Form.Attribute client={client} wallet={wallet} /> */}
					{!isExist && <Form.Merchant client={client} setIsExist={setIsExist} wallet={wallet} />}
				</div>
			</main>
		</>
	);
};

export default Wallet;
