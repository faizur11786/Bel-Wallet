import { Inter } from '@next/font/google';
import Head from 'next/head';
import React, { useEffect, useState } from 'react';
import styles from '../styles/Home.module.css';
import { Client } from '../../beltest/ts-client';
import { DirectSecp256k1HdWallet } from '@cosmjs/proto-signing';
import Form from '../components/Form';
import Profile from '../components/Profile/Profile';
const inter = Inter({ subsets: ['latin'] });

const Wallet = (props) => {
	const [client, setClient] = useState(null);
	const [wallet, setWallet] = useState(null);

	const [info, setInfo] = useState(null);

	const [isExist, setIsExist] = useState(true);
	const [merchants, setMerchants] = useState(null);

	useEffect(() => {
		(async () => {
			const mnemonic =
				'lab quarter witness come frequent strong bird tribe run dwarf sick thumb tail salon endorse gym asthma ski life february dish review connect ecology';
			const wallet = await DirectSecp256k1HdWallet.fromMnemonic(mnemonic, { prefix: 'be' });

			const chain = new Client(
				{
					apiURL: 'http://localhost:1317',
					rpcURL: 'http://localhost:26657',
					prefix: 'be',
				},
				wallet
			);
			setClient(chain);
			const accounts = await wallet.getAccounts();
			setWallet(accounts[0]);
			await loadInfo(chain, accounts[0].address);
			await loadMerchants(chain);
		})();
	}, []);

	const loadInfo = async (client, address) => {
		try {
			const {
				data: { entityTypes },
			} = await client.BeltestEav.query.queryEntityTypesAll();
			const guid = entityTypes[0].name.toLowerCase() === 'user' ? entityTypes[0].guid : entityTypes[1].guid;

			const { data } = await client.BeltestEav.query.queryUsers(address, guid);
			setInfo(data);
		} catch (error) {
			console.log(error);
		}
	};

	const loadMerchants = async (client) => {
		const { data } = await client.BeltestEav.query.queryMerchantsAll();
		console.log(data);
		setMerchants(data);
	};

	return (
		<>
			<Head>
				<title>Create Next App</title>
				<meta name='description' content='Generated by create next app' />
				<meta name='viewport' content='width=device-width, initial-scale=1' />
				<link rel='icon' href='/favicon.ico' />
			</Head>
			<main className={styles.main}>
				<h3 className={inter.className}>User's perspective</h3>
				<br />
				{wallet && (
					<Profile
						loadMerchants={loadMerchants}
						merchants={merchants}
						info={info}
						client={client}
						setIsExist={setIsExist}
						wallet={wallet}
					/>
				)}
				<div className={styles.formGroup}>
					{!isExist && <Form.User client={client} setIsExist={setIsExist} wallet={wallet} />}
				</div>

				{merchants ? (
					<div className={`${inter.className} ${styles.merchantCard}`}>
						{merchants.merchants.map((merchant, index) => (
							<div key={index} className={styles.card}>
								<h5 style={{ marginBottom: '0.25rem' }}>Merchant {index + 1}</h5>
								<p>{merchant.creator}</p>
							</div>
						))}
					</div>
				) : (
					'Merchant Not found'
				)}
			</main>
		</>
	);
};

export default Wallet;
